{"cells":[{"cell_type":"markdown","metadata":{"id":"BbFilrIBou1y"},"source":["#  Assignment: CNN-Based Image Classification Using CIFAR-100\n","**Total Marks: 100**\n","\n","**Instructions:**\n","- This is a programming and analysis-based assignment.\n","- Use TensorFlow/Keras to build your models.\n","- Add appropriate comments and explanations.\n","- Attempt all questions. Marks are indicated.\n"],"id":"BbFilrIBou1y"},{"cell_type":"markdown","metadata":{"id":"jlMRd06_ou10"},"source":["##  Section A: Data Exploration and Preprocessing (20 marks)"],"id":"jlMRd06_ou10"},{"cell_type":"markdown","metadata":{"id":"BLDnxGknou11"},"source":["**Q1.** (5 marks) Load the CIFAR-100 dataset using `label_mode='fine'`. Print the shape of the training and test sets."],"id":"BLDnxGknou11"},{"cell_type":"code","metadata":{"id":"itIQrv_6ou11","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1747233298520,"user_tz":-330,"elapsed":15947,"user":{"displayName":"Ashu B","userId":"12274433299248279812"}},"outputId":"247a6e38-908e-4a26-8581-cc96d17a425b"},"source":["from tensorflow.keras.datasets import cifar100\n","#Load dataset with fine labels\n","(x_train, y_train), (x_test, y_test) = cifar100.load_data(label_mode='fine')\n","\n","#print shapes\n","print(\"Training data shape:\", x_train.shape)\n","print(\"Training data shape:\"), x_test.shape, y_test.shape"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-100-python.tar.gz\n","\u001b[1m169001437/169001437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 0us/step\n","Training data shape: (50000, 32, 32, 3)\n","Training data shape:\n"]},{"output_type":"execute_result","data":{"text/plain":["(None, (10000, 32, 32, 3), (10000, 1))"]},"metadata":{},"execution_count":7}],"id":"itIQrv_6ou11"},{"cell_type":"markdown","metadata":{"id":"tUoKWFQmou12"},"source":["0**Q2.** (5 marks) Display 10 random images from the dataset with their class labels."],"id":"tUoKWFQmou12"},{"cell_type":"code","metadata":{"id":"gtFga54lou12","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1747233301718,"user_tz":-330,"elapsed":3183,"user":{"displayName":"Ashu B","userId":"12274433299248279812"}},"outputId":"6789e42b-6c55-4250-e0ea-aaa6a8798104"},"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","from tensorflow.keras.datasets import cifar100\n","\n","#load data again if needed\n","(x_train,y_train),(x_test,y_test) =  cifar100.load_data(label_mode='coarse')\n","\n","#CIFAR-100 Fine lebel names(manually added)\n","class_names = [\n","    'apple', 'aquarium_fish', 'baby', 'bear', 'beaver', 'bed', 'bee', 'beetle',\n","    'bicycle', 'bottle', 'bowl', 'boy', 'bridge', 'bus', 'butterfly', 'camel',\n","\n","    'can','castle', 'caterpillar', 'cattle',\n","\n","]\n","\n","#select 10 random indices\n","indices = np.random.choice(len(x_train), 10, replace=False)\n","\n","#plot the images\n","plt.figure(figsize=(12,5))\n","for i, idx in enumerate(indices):\n","  plt.subplot(2,5, i + 1)\n","  plt.imshow(x_train[idx])\n","  plt.title(class_names[y_train[idx][0]])\n","  plt.axis('off')\n","  plt.tight_layout()\n","  plt.show()"],"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x500 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAO8AAAEGCAYAAACNTMJHAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAFaRJREFUeJzt3UuIXOW2B/C1965nV1X6kbTpxPjoxKiXe89VrsGJYnIzUgdBRKI4EEeJGEUHToQLKiQIDhwoigREB5mqMx2JoAMnDo7Ikavx2J2XSdrq7upnVddjf3fgTXNz3f+/lUpHXfj/wYGTWr2rdu2q1Ru/1Wt9UQghmIi4E//RJyAig1Hyijil5BVxSskr4pSSV8QpJa+IU0peEaeUvCJOKXlFnFLyOvHyyy9bFEVWr9ev6evs27fP9u3bd01fQzaGklfEKSWviFNKXhGnlLzO1Ot1O3jwoG3atMk2b95szz33nLVarct+5sSJE3bXXXdZuVy2sbExe+yxx+zMmTO/eq7jx4/brl27rFwu2913321ffPHF7/U2ZAMoeZ05ePCgtVote/XVV+3BBx+0N954ww4dOrQeP3bsmD3xxBO2e/due/311+3555+3Tz/91O677z5rNBrrP/fuu+/a4cOHbWJiwl577TW755577MCBA5lJLn9SQVx46aWXgpmFAwcOXPb4008/HcwsfP3112F6ejokSRKOHTt22c988803IZfLrT/ebrfDddddF+68886wtra2/nPHjx8PZhb27t17zd+PXD3deZ05cuTIZf9+9tlnzczs448/tg8//NDSNLWDBw9avV5f/9/ExITt3r3bPvvsMzMz++qrr2xmZsaeeuopKxQK68/15JNP2vDw8O/3ZuSq5P7oE5Ars3v37sv+vWvXLovj2Kanpy2OYwsh/OpnLsnn82ZmdurUqcznyufztnPnzmtw1nItKHmdi6Jo/f+naWpRFNknn3xiSZL86mer1erveWpyjSl5nTl58qRNTk6u//uHH36wNE3t5ptvtiRJLIRgk5OTduutt8LnuOmmm9afa//+/euPdzodm5qasjvuuOPavQHZMPpvXmfeeuuty/795ptvmpnZAw88YA8//LAlSWKvvPKKhf83VzCEYLOzs2ZmtmfPHhsfH7d33nnH2u32+s+8//77l61Iy5+b7rzOTE1N2YEDB+z++++3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\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAIEAAACYCAYAAADDeYoDAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAE4xJREFUeJztXWuMVeV6ftZa+zYzzMAw6LEHlJkOQ0npiZ4zPR6kIolChQQJmZoJ4Q+YEE1Foz/ESIwBgsQYSDQSm/PD1tSQ+MNbi4nWWiXBCvqnqJxjlLHOKA6XmeEwzHVf1lpff7Ss7/nezcxmURWJ75OYfJvv22utvXznvV88Y4yB4mcN/0o/gOLKQ4lAoUSgUCJQQIlAASUCBZQIFFAiUECJQIGrgAh27NgBz/MwNDR0pR8lQWtrKzZt2nSlH+N7w0+eCK4UDh8+jB07dmB4ePhKP8oPDiWCKXD48GHs3LlTiUDx88BVQwRDQ0Po7u5GU1MTWlpa8NBDD6FYLDpn9u/fj87OTtTV1WH27NlYv349Tpw4UXWtjz/+GKtWrcLMmTNRX1+P5cuX48MPP0z2d+zYga1btwIA2tra4HkePM9DX1/flM83PDyMhx9+GNdffz3y+TwWLFiAp59+GnEcfz8v4AdE5ko/wKWiu7sbra2teOqpp/DRRx/hueeew7lz5/DSSy8BAHbv3o0nnngC3d3d2Lx5MwYHB7Fv3z7cdtttOHr0KGbNmgUAeP/997F69Wp0dnZi+/bt8H0fL774Im6//XZ88MEHuPnmm9HV1YXjx4/j5ZdfxjPPPIM5c+YAAK655pqLPtvExASWL1+O/v5+3Hfffbjhhhtw+PBhbNu2DadOncKzzz77Y7yiy4f5iWP79u0GgFm7dq3z7/fff78BYD799FPT19dngiAwu3fvds4cO3bMZDKZ5N/jODYdHR3mzjvvNHEcJ+cmJiZMW1ubWblyZfJve/bsMQBMb29v1TPNnz/fbNy4Mfm8a9cu09DQYI4fP+6ce+yxx0wQBObbb7+93J//o+CqEQdbtmxxPj/44IMAgLfeeguvv/464jhGd3c3hoaGkv+uu+46dHR04ODBgwCATz75BD09PdiwYQPOnj2bnBsfH8cdd9yBQ4cOXRb7fuWVV7Bs2TI0Nzc791+xYgWiKMKhQ4f+/y/gB8RVIw46Ojqcz+3t7fB9H319ffB9H8aYqjMXkM1mAQA9PT0AgI0bN055n/Pnz6O5uTnVs/X09OCzzz6bUlwMDAykut6PjauGCCQ8z0vWcRzD8zy8/fbbCIKg6uyMGTOScwCwZ88e3HTTTRe97oWzaRDHMVauXIlHH330ovsLFy5Mfc0fE1cNEfT09KCtrS35/NVXXyGOY7S2tiIIAhhj0NbWNu0Lb29vBwA0NTVhxYoV096PiawW2tvbMTY2VvOaP1VcNTrB888/73zet28fAGD16tXo6upCEATYuXMnjMibNcbg7NmzAIDOzk60t7dj7969GBsbq7rH4OBgsm5oaACAS3IWdXd348iRI3jnnXeq9oaHhxGGYc1rXElcNZygt7cXa9euxapVq3DkyBHs378fGzZswI033ggAePLJJ7Ft2zb09fVh3bp1aGxsRG9vL9544w3ce++9eOSRR+D7Pl544QWsXr0aixcvxj333IO5c+eiv78fBw8eRFNTE958800A/0swAPD4449j/fr1yGazuOuuuxLiYGzduhUHDhzAmjVrsGnTJnR2dmJ8fBzHjh3Dq6++ir6+vsTM/EniyhontXHBRPz888/N3XffbRobG01zc7N54IEHzOTkpHP2tddeM7feeqtpaGgwDQ0NZtGiRWbLli3myy+/dM4dPXrUdHV1mZaWFpPP5838+fNNd3e3ee+995xzu3btMnPnzjW+7zvmojQRjTFmdHTUbNu2zSxYsMDkcjkzZ84cs3TpUrN3715TLpe/9/fyfcIzRusOfu64anQCxQ8HJQKFEoFCiUABJQIFlAgUUCJQIIXH8J/e+MdkLcOt7BaNo8jZy1JAxwSuPz6ij/mAHiUU4VxyZVS5NdjHP91e4NK7n7XPFXt0PxF/cgJVofvbPPob8sXfkxfb70WVir28eA749pwRe6VKOVlnsu7/qgy913K57Oz5vr3O5jWbUQvKCRRKBIoU4oDj9BVib4ArDjIZ95IesTs/cPfCyF6H2Xw24/LkgK6Zy+WcPRZNUkyV+TnFNUtlTlK19w6MCCETa83n8+6WZ6/J7B8AKmV77yz9qeUzQmzks8l6MhJsndbZXNbZy2XsZ/nOwyhd1FI5gUKJQKFEoEAKnYD1AGmS8J6Uy5lCwe4Zd4/PRrDml7Si2MSqCHnHJpzvuV8MyKwyvrtnYqsHZEhvmZGvc69P1wiNNF3tUupJpVIpWTeRHuMjFuesbhLL9EhSM2LjmqeTE/TOhWmcL7i6Sy0oJ1AoEShSiAM2O2QeLpuPvsjSdR16l5bENClqDAMyj3xRL8PmUUmw5HyQp7X7Uyv0zDm6fl2dKw5K9LtZhABAJrDfKxlXREbkOWVRFImXx8IhEuImovt5FVccxPSZzXAAyGVdM7oWlBMolAgUSgQKpNAJWJ57wtziSKEsA2M5GmHqYs/AJxdsxpW9jtyUJigpHTLSlvXJ3SzovZCxcjOTs+eKoatXjE6M2+cQ957R0JispUs5pkhomd+deD8huakj8Xp8eieReC6f9ABZLVURZ2tBOYFCiUCRQhxkKGIWi+SQmFi+ZJnMqiTbYlbOkUhPmGLRNJHCgLyEhXzB2ePreJ57zaZ6W31cNvbeExOTzjkTUkKLMO/CCkVPPZfN19OzlGNrzoWyVhL8DsRvo8hnIKKnhkzQSsk1T+H+hJpQTqBQIlAoESiQQidgMzAWrtuSsSaJdBuzmRMI05ITIlknKMeujAtJpgYiUsg5oqGUjXTvGK7ZxO5h9rrmjZvB45H+U5EmLnly2cwEnIQkVEr2oC8855yQZESSboX0n2CGq+9kSF+Q15Ru5FpQTqBQIlCkEAfMYGRtAbP5fMFlWz5900xjPnLNQLnssm42Ef2sy65Z/ESiLoATMTzJhuOL1zL4QmTlCtY0iyolZ49PynuHnHFCzyjrDjhhRopSThYJZYS0YMWZl3O9lZEmmirSQolAcXmNq2QAyZipPXqc9ydZLefhMcvPCZbv1DWIAAwzUOlpdO4tkkrKZXvNkAIuMhBUGZuw5wSbjShgVTGum47zGzmoJkvZommSdXySYfKvtUSeTU9EnuT7qwXlBAolAoUSgQIpdAKW556M5NFeVT1gTHK0qnKcTScrN7NCprFJKuVmVGFvorvLz+XLZA7SMwLSF6JIdkSNae3eu1Ii8054DOMKvQfKLq1Eoo6TPvtZ928ykyPTWySPViatPuVLXShlU0LlBAolAkUKccBsPhQeQy/DuXDCjCLvnzQRJdu/AOlZdEqvBesLQwoaicDWRJHMKM99LqdWgr140rNIAiiqSgihZ4xlPQR1EglZnIkgGotEWT9AIkbk8YClViCuGVQJzemhnEChRKBQIlAghU7ACZimKiRnZV51IiiVjk+bVGKvEQmdg40jaf5kApab0i1t9RHp6mY3coW6hHH9A+AmtFREeTiL8NKkyO5kk46eS747Nk8zQvDz7ylPivpMSmxtqHcjt/m81iIqUkKJQJEixzAz9VFmmfmsG4VjU4nPAS5L9smrJj1zbBVG03jHqvL8iJ1Wyi47NZScGBKbL4uy+LjMJeCiHiJjzc5SKLq3TNpn8ahEPs6LpBjyCiJy9wLOYQmFGMmS6BCmZSHlRDflBAolAoUSgQIpdIIymVGecEtyhM4IuV+iLluR8MmGHAE0U0cpJylvX7qls2zqib1K2ZptsahJKBa5gyrJ77L7/GNnh5P10MAZZ6+uwX6PS9gBoKHRjtotksk7b0Gbc86EVJIPd9xeHelXhYKoh2CVQCSvFstuQmwtKCdQKBEoUnUvm9orCM4bEUkZhYxladJrF1NDZ06WjCsuWx8ZHaF7u9fPUUJnueiy/JjMtvGRYWePE1oy9HPOfXfaOTdwyn4e/r9xuxcwk2osJkR3Ma95VrJumWenqS9a1Oqcm+QmniL455rKsh0Ale2J6rvxYrradOUECiUChRKBAmmGXrDbWET5nKRNIfe5x4ssHc+TEDzd15esYxEx++IPXyRr2Vzb0TOEuzlXZ82qkeJ5Z4+zb3wyQUf6XTOwQm7kjOhXU6L4ZllEH8+TXF74V+32mYSL16c6Qk8UyPC7k5FVHgzCs5IAYFIqCTWgnEChRKBIIQ4i9gQKU4ZZsuy9HwT286kT/c5eccSafl99eixZj55yWXI4PJas5VwBbgot6wjrZtlo2hhcL5ohk3Rm1pp6jSK/n3tOm1Amudq17GLy2yWdyfrXv7XrkvR4ZlkcuCKF5zDIJFT+fxCGU8+AuBQoJ1AoESgu02Moq5w4eSMWAaQZ1HCppbnJ2Tvw7rvJevLMcLIOxl3rIEel4wU5Lo/YaZCVpWDEJoV2ze64mFh5xpedUKg3s0gqGfHtc9X/2Wxn7ze3/Np+j95P6LsiK/DofsIbWs/1HKJ8bZLK0CJRmu7J+UE1oJxAoUSgUCJQIM28A57uLWQQ59JnRSPmIkXyZs1x5eaNv7Fy8/h/WRNx8OtvnXNZmjWUF9cPqJzbCJldjqzcLIkIIzJWV6lQY2kj3khA9ZIV4+oqE7DXXLR4obM369o5yfrkGeutzBZcvYh1AjnTIBaRSQaX0IfiXMZTnUCREkoEihQTUsNpRuJxr39hP45MWBbaWHDHza29uytZf7HABln++fcvOOfMmGV3WdG4MQgoGUWUn2fZ9BNdQEyhnj7Y78mGlRUK6kx4Lruub7Y5gb/7m1ucvTCmvEXPirBsIOoyaCyqLEPj3smVWORPkvkbizkJsTe1GLkYlBMolAgUSgQKpNAJSpSokBXRroiiiBWR4MBJJmMTE87eACVudt6yJFn3/vfXzrlD//p2sq4Tbt0GmltQLI45ezwat74g5G0d5fRzdFA8/wQNJBgV2tDSZcuT9bzWBc5e/8CgvT7pH7KJNSMjkkp47J0fu9/jOQ8FET2V43xrQTmBQolAcZkTUuX0c+71L8vEDOXeGZEYcXLQssyGJpsAsqb775xz4yPW4zbYe8K9PuUAhlXNQqxpVhAirH72zGTtT9jnKor8vBHqdhLNcMvEFnX+dbI+8yc3h9HNfaGp6ZBeTS7TE6Kiwmfl6B37uRK6Zm0wTRuBi0E5gUKJQKFEoEAqnYAbPcuhFzyOVnTgIlks97yMvc43p08l6z9vbXXOrd2wPln/57/9h7P37r8cSNYNolVOPUUKW375C2fvml/OS9bn+vuS9ekzA86502NW51j8q7909ubMnWvPDfzJ2eOaTM704fcIAD79HVY17454MIeot6C1LMmXk+VrQTmBQolAkWoGEncXc80crgWQDSWZzmRNApdghVSf8Iee4865hfNak/WvfrfE2Xvn399P1t+dPefsFcjca2xrdfZmXGvLxYeGTibrc4KVtsyzYmPF36509mJi7TLK51FkNePxv0/d5SWM3SilcZJhxbsjcztbcBNtZOJpLSgnUCgRKNJUJfN4GuGR4vE05Uk5RdSeNSJpokxabYECQbEI4nxzyloOyzpdcbDp77ck698//w/O3jB1JxmTHU6arMew0NKSrO9Yt845t2SpDRLVFdzffZoCYLmcG9hiC8rplyy8pjxmLxS1BdwETIaEylThLQdk53La21iREkoECiUCRZqp6WSuVE/lZnNFyEaqSTCQpqXVH4JJGv8WuNfgsXd9J92ahCXLlybrhiY3ylcs2bBiWSRfcjn94llWz6irc5tD5xsbk/XoqJu04gdW9so5CTzryHkHQn6XyJyT6aGcZGLEeF0PVKco6g7Y3L4UKCdQKBEo0pSmh9wRRJSCkeknK8DZfKmeCk4NJYk9S2ZGKfw4OeA2m5yctHmLzde6ZW6cVDJ4zg3wMGvPFshzKYJjZ4aGknUuI0f4cfDH/XUsMmNHHLjX97I0UT2WgSB6E7IpFwXLooyoOzDqMVSkhBKBQolAkUInKOSt+VUR9XoR6QvS9ZmlbmByJB6jqmk2YZzGzeWle5aaX5+hxFVAyGkzdXTTp5J2eX1uvxMKmc0JIrLZJDfd5JIBAzFyj/ZkaXpAzSx92Q6AlIRI6gDTvOeLQTmBQolAkUIctLf/RbL+4x8/c/a4s1aQEVEyihRKccDT0FkcVHVH4y4pYq9C7DoQyRU+9wYuS3FD5h15+0pllyV7VO9VlRBCv6dcckVksWRzEz3qqlYpimac/Epk0o1P/3vEvSscfRSiVEYVa0E5gUKJQKFEoEAKneC6X9iEy1FqTA0AX/faxNCKlKmcEJmV5heZltwOR8i/PJmZVc2bSYxKnYPdvFFVCxfSM8iGi6cRp5Ho1sru2VjUCgbceZU7vgozMEcl8lLh4chhIMrWY569IHQCqSPUgnIChRKBIoU48Knp4ry5Nzh7xZKdDvodlXQBLsv3hVctcMqzqGxLRuSoPDwjGlxnSMSUxXgdQ/eWTTC5m0eJvmfk3wVNVI+FN5QTSWTkjqeyc3e3nEg+8aep5+CkkoyIYPIUVDGVp2r0YC0oJ1AoESiUCBRIoRM0UnFIWHa7kLW1diRrT9Qi9p/8JlmXRCsYpw6PxtLlxNAGbqgty+w446ksSrTZVJJyMyD6D8lskzOWnAESQmbHbFoKfYejfIbmCEu3d0iyvco6JT2gLCah83NK8zRl8zLlBAolAgUAz0i7RPGzg3IChRKBQolAASUCBZQIFFAiUECJQAElAgWUCBQA/gcgtoX23STAYgAAAABJRU5ErkJggg==\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}],"id":"gtFga54lou12"},{"cell_type":"markdown","metadata":{"id":"5M42p--7ou12"},"source":["**Q3.** (5 marks) Normalize the images and one-hot encode the labels. Explain why we perform both operations."],"id":"5M42p--7ou12"},{"cell_type":"code","metadata":{"id":"qwvBdNCPou12","executionInfo":{"status":"ok","timestamp":1747233301966,"user_tz":-330,"elapsed":235,"user":{"displayName":"Ashu B","userId":"12274433299248279812"}}},"source":["from tensorflow.keras.utils import to_categorical\n","\n","# Normalize the images to [0,1]\n","x_train = x_train.astype('float32') /255.0\n","x_test = x_test.astype('float32')  /255.0\n","\n","# One-hot encode the labels\n","y_train = to_categorical(y_train, num_classes=100) # for fine labels 100\n","y_test = to_categorical(y_test, 100)"],"execution_count":9,"outputs":[],"id":"qwvBdNCPou12"},{"cell_type":"markdown","metadata":{"id":"1onUnqqXou12"},"source":["**Answer:**\n","\n","#Normalization (scaling pixel value to [0, to 1])\n","*****it helps in reduce training time and improve stabilty\n","\n","\n","** neural networks peform better whien inputs are on same scale.\n","\n","****Raw pixel vaule(0-255) are too large and inconsistent\n","\n","\n","2)one-hot encoding :\n","\n","****its converts class labesl into vectors\n","\n","**** required for categorical classification with softmax activation\n","\n","**help the images to associate\n"],"id":"1onUnqqXou12"},{"cell_type":"markdown","metadata":{"id":"7PiVEix3ou13"},"source":["**Q4.** (5 marks) What challenges do you expect when working with 100 classes instead of 10 (like CIFAR-10)?"],"id":"7PiVEix3ou13"},{"cell_type":"markdown","metadata":{"id":"FYlQZZ0Iou13"},"source":["several challenges arise:\n","\n","increased complexity,\n","more data needed,\n","longer training time,\n","higher risk of misclassification,\n","larger model size.\n","\n"],"id":"FYlQZZ0Iou13"},{"cell_type":"markdown","metadata":{"id":"GYgay_c1ou13"},"source":["##  Section B: Model Design & Training (40 marks)"],"id":"GYgay_c1ou13"},{"cell_type":"markdown","metadata":{"id":"m3ihHp9Vou13"},"source":["**Q5.** (20 marks) Build and compile a CNN with at least two convolutional blocks and one dense output layer with 100 neurons. Use appropriate dropout and activation functions. Display the model summary."],"id":"m3ihHp9Vou13"},{"cell_type":"code","metadata":{"id":"qYriM9tFou13","colab":{"base_uri":"https://localhost:8080/","height":211},"executionInfo":{"status":"error","timestamp":1747233302080,"user_tz":-330,"elapsed":95,"user":{"displayName":"Ashu B","userId":"12274433299248279812"}},"outputId":"80656a1e-8b5e-4f7c-eb08-acd01b80939f"},"source":["import tensorflow as tf\n","from tensorflow.keras import layers, models\n","\n","#Define the model\n","model = models.Sequential()\n","\n","#First convolutional block\n","model.add(layers.Conv2D(32,(3,3),activation='relu', input_shape=(32, 3, 3)))\n","model.add(layers.Maxpooling2D((2, 2)))\n","model.add(layers.Dropout(0.25))\n","\n","#Second Convolutional block\n","model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","model.add(layers.Maxpooling2D((2, 2)))\n","model.add(layers.Dropout(0.25))\n","\n","\n","\n","#Flatten and Dense layers\n","model.add(layers.Flatten())\n","model.add(layers.Dense(100, activation='relu')) # 100-neuron dense layer\n","model.add(layers.Dropout(0.5))\n","model.add(layer.Dense(10, activation='softmax')) #assuming 10 classess (e.g CIFAR-100)\n","\n","#Compile the model\n","model.compile(optimizer='adam',\n","              loss='sparse_categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","#Display model summary\n","model.summary()"],"execution_count":10,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"module 'keras._tf_keras.keras.layers' has no attribute 'Maxpooling2D'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-033511b66f71>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m#First convolutional block\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mConv2D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mactivation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'relu'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_shape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMaxpooling2D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDropout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.25\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: module 'keras._tf_keras.keras.layers' has no attribute 'Maxpooling2D'"]}],"id":"qYriM9tFou13"},{"cell_type":"markdown","metadata":{"id":"cW0rJFZ6ou13"},"source":["**Q6.** (15 marks) Train the model for 15–20 epochs and plot training and validation accuracy curves."],"id":"cW0rJFZ6ou13"},{"cell_type":"code","metadata":{"id":"La50h-Zpou13","colab":{"base_uri":"https://localhost:8080/","height":373},"executionInfo":{"status":"error","timestamp":1747234892162,"user_tz":-330,"elapsed":5306,"user":{"displayName":"Ashu B","userId":"12274433299248279812"}},"outputId":"f38aede4-c014-438a-d8f1-5155c1798791"},"source":["import matplotlib.pyplot as plt\n","\n","#Assuming you have already complied the model\n","#load your data (example: CIFAR-100)\n","\n","from tensorflow.keras.datasets import cifar100\n","(x_train, y_train), (x_test, y_test) = cifar100.load_data()\n","\n","\n","#Normalize pixel values\n","x_train = x_train / 255.0\n","x_test = x_test / 255.0\n","\n","#Compile the model before training\n","model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","\n","#Train the model (15-20 epochs as required)\n","history = model.fit(x_train, y_train, epochs=15, validation_data=(x_test, y_test))\n","\n","\n","#Plot traing and Validation accuracy\n","plt.figure(figsize=(10, 5))\n","plt.plot(history.history['accuracy'], label='Training Accuray')\n","plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n","plt.title('Training and Validation Acciracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.grid(True)\n","plt.show()"],"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/15\n"]},{"output_type":"error","ename":"ValueError","evalue":"Argument `output` must have rank (ndim) `target.ndim - 1`. Received: target.shape=(None, 1), output.shape=(None, 30, 30, 32)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-b65995a24241>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;31m#Train the model (15-20 epochs as required)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    120\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    121\u001b[0m             \u001b[0;31m# `keras.config.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 122\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    123\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/backend/tensorflow/nn.py\u001b[0m in \u001b[0;36msparse_categorical_crossentropy\u001b[0;34m(target, output, from_logits, axis)\u001b[0m\n\u001b[1;32m    723\u001b[0m         )\n\u001b[1;32m    724\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 725\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m    726\u001b[0m             \u001b[0;34m\"Argument `output` must have rank (ndim) `target.ndim - 1`. \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    727\u001b[0m             \u001b[0;34m\"Received: \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Argument `output` must have rank (ndim) `target.ndim - 1`. Received: target.shape=(None, 1), output.shape=(None, 30, 30, 32)"]}],"id":"La50h-Zpou13"},{"cell_type":"markdown","metadata":{"id":"_u4kIW2lou13"},"source":["9x_**Q7.** (10 marks) Report the final test accuracy. Discuss what it indicates about the model's performance."],"id":"_u4kIW2lou13"},{"cell_type":"code","metadata":{"id":"67WJWFGYou13","executionInfo":{"status":"aborted","timestamp":1747233302214,"user_tz":-330,"elapsed":18,"user":{"displayName":"Ashu B","userId":"12274433299248279812"}}},"source":["# Model evaluation code here"],"execution_count":null,"outputs":[],"id":"67WJWFGYou13"},{"cell_type":"markdown","metadata":{"id":"dpAXwrdKou14"},"source":["_Your explanation here_"],"id":"dpAXwrdKou14"},{"cell_type":"markdown","metadata":{"id":"ipryLM1cou14"},"source":["##  Section C: Model Experimentation (20 marks)"],"id":"ipryLM1cou14"},{"cell_type":"markdown","metadata":{"id":"7H1LzNDkou14"},"source":["**Q8.** (10 marks) Add one more convolutional block to the CNN. Train and compare accuracy with your previous model. Which one performs better and why?"],"id":"7H1LzNDkou14"},{"cell_type":"code","metadata":{"id":"c827p-okou14","executionInfo":{"status":"aborted","timestamp":1747233302227,"user_tz":-330,"elapsed":29,"user":{"displayName":"Ashu B","userId":"12274433299248279812"}}},"source":["# Modified model code here"],"execution_count":null,"outputs":[],"id":"c827p-okou14"},{"cell_type":"markdown","metadata":{"id":"_cV9pXu2ou14"},"source":["_Comparison answer here_"],"id":"_cV9pXu2ou14"},{"cell_type":"markdown","metadata":{"id":"YVR3zpYhou14"},"source":["**Q9.** (10 marks) Use `label_mode='coarse'` and repeat training with the original model (2 conv blocks). Compare the accuracy. Explain why there's a difference."],"id":"YVR3zpYhou14"},{"cell_type":"code","metadata":{"id":"shwbViR3ou14","executionInfo":{"status":"aborted","timestamp":1747233302230,"user_tz":-330,"elapsed":6,"user":{"displayName":"Ashu B","userId":"12274433299248279812"}}},"source":["# Your code and comparison here"],"execution_count":null,"outputs":[],"id":"shwbViR3ou14"},{"cell_type":"markdown","metadata":{"id":"oaC-Y0T4ou14"},"source":["_Explanation here_"],"id":"oaC-Y0T4ou14"},{"cell_type":"markdown","metadata":{"id":"fbUWxWh4ou14"},"source":["##  Section D: Conceptual Questions (20 marks)"],"id":"fbUWxWh4ou14"},{"cell_type":"markdown","metadata":{"id":"P-uMaCbTou14"},"source":["**Q10.** (5 marks) Explain the role of dropout in CNNs. What could happen if we remove dropout layers?"],"id":"P-uMaCbTou14"},{"cell_type":"markdown","metadata":{"id":"pmBU85Dtou14"},"source":["_Your answer here_"],"id":"pmBU85Dtou14"},{"cell_type":"markdown","metadata":{"id":"YsPiWQXMou14"},"source":["**Q11.** (5 marks) What is the role of the softmax activation in the output layer of your CNN?\n"],"id":"YsPiWQXMou14"},{"cell_type":"markdown","metadata":{"id":"047Ip7Xbou14"},"source":["_Your answer here_"],"id":"047Ip7Xbou14"},{"cell_type":"markdown","metadata":{"id":"rehwLKm8ou14"},"source":["**Q12.** (5 marks) What changes would you make to the CNN architecture to improve training speed and reduce overfitting?"],"id":"rehwLKm8ou14"},{"cell_type":"markdown","metadata":{"id":"MwMb8qcLou14"},"source":["_Your answer here_"],"id":"MwMb8qcLou14"},{"cell_type":"markdown","metadata":{"id":"8qiu91x1ou14"},"source":["\n"],"id":"8qiu91x1ou14"},{"cell_type":"markdown","metadata":{"id":"72vUeDQYou14"},"source":["_Your answer here_"],"id":"72vUeDQYou14"}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":""},"colab":{"provenance":[{"file_id":"1AUQrtmSjlUqa4KjRSiBxafwE0sPPZx96","timestamp":1747152936236},{"file_id":"1gkrxy5OMUaGsKBCWUJ47FnkbnQeRoZUt","timestamp":1747152904042}]}},"nbformat":4,"nbformat_minor":5}